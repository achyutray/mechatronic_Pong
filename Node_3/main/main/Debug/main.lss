
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00802800  00000b22  00000bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a76  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  00004a76  00000a76  00000b2a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000001f  0080280e  0080280e  00000be4  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000128  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000040d8  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002aae  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bd3  00000000  00000000  0000792e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000029c  00000000  00000000  00008504  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001acf  00000000  00000000  000087a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000634  00000000  00000000  0000a26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  0000a8a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  88:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_34>
  8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  98:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	e2 e2       	ldi	r30, 0x22	; 34
  b4:	fb e0       	ldi	r31, 0x0B	; 11
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	28 e2       	ldi	r18, 0x28	; 40
  c4:	ae e0       	ldi	r26, 0x0E	; 14
  c6:	b8 e2       	ldi	r27, 0x28	; 40
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ad 32       	cpi	r26, 0x2D	; 45
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 40 01 	call	0x280	; 0x280 <main>
  d6:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <CAN_send_message>:

void CAN_init(){
	mcp2515_init();
}

void CAN_send_message(CAN_message *message){
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	8c 01       	movw	r16, r24
	/* Sending message ID */
	mcp2515_write(MCP_TXB0SIDH, (message->id) >> 3);
  e6:	fc 01       	movw	r30, r24
  e8:	60 81       	ld	r22, Z
  ea:	66 95       	lsr	r22
  ec:	66 95       	lsr	r22
  ee:	66 95       	lsr	r22
  f0:	81 e3       	ldi	r24, 0x31	; 49
  f2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (message->id) << 5);
  f6:	f8 01       	movw	r30, r16
  f8:	60 81       	ld	r22, Z
  fa:	62 95       	swap	r22
  fc:	66 0f       	add	r22, r22
  fe:	60 7e       	andi	r22, 0xE0	; 224
 100:	82 e3       	ldi	r24, 0x32	; 50
 102:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	
	/* Sending data length */
	mcp2515_write(MCP_TXB0DLC, message->length);
 106:	f8 01       	movw	r30, r16
 108:	61 81       	ldd	r22, Z+1	; 0x01
 10a:	85 e3       	ldi	r24, 0x35	; 53
 10c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	
	/* Sending data */
	for(uint8_t i = 0; i < (message->length); i++){
 110:	f8 01       	movw	r30, r16
 112:	81 81       	ldd	r24, Z+1	; 0x01
 114:	88 23       	and	r24, r24
 116:	71 f0       	breq	.+28     	; 0x134 <CAN_send_message+0x56>
 118:	c0 e0       	ldi	r28, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
 11a:	f8 01       	movw	r30, r16
 11c:	ec 0f       	add	r30, r28
 11e:	f1 1d       	adc	r31, r1
 120:	62 81       	ldd	r22, Z+2	; 0x02
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	8c 0f       	add	r24, r28
 126:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	
	/* Sending data length */
	mcp2515_write(MCP_TXB0DLC, message->length);
	
	/* Sending data */
	for(uint8_t i = 0; i < (message->length); i++){
 12a:	cf 5f       	subi	r28, 0xFF	; 255
 12c:	f8 01       	movw	r30, r16
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	c8 17       	cp	r28, r24
 132:	98 f3       	brcs	.-26     	; 0x11a <CAN_send_message+0x3c>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	/* Using the Transmission Buffer 0 */
	mcp2515_request_to_send('0');
 134:	80 e3       	ldi	r24, 0x30	; 48
 136:	0e 94 b1 01 	call	0x362	; 0x362 <mcp2515_request_to_send>
}
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <CAN_receive_message>:

void CAN_receive_message(CAN_message* message){
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	8c 01       	movw	r16, r24

	/* Receive message id */
	message->id = (mcp2515_read(MCP_RXB0SIDH)<<3) + (mcp2515_read(MCP_RXB0SIDL)>>5);
 14a:	81 e6       	ldi	r24, 0x61	; 97
 14c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp2515_read>
 150:	c8 2f       	mov	r28, r24
 152:	82 e6       	ldi	r24, 0x62	; 98
 154:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp2515_read>
 158:	cc 0f       	add	r28, r28
 15a:	cc 0f       	add	r28, r28
 15c:	cc 0f       	add	r28, r28
 15e:	82 95       	swap	r24
 160:	86 95       	lsr	r24
 162:	87 70       	andi	r24, 0x07	; 7
 164:	8c 0f       	add	r24, r28
 166:	f8 01       	movw	r30, r16
 168:	80 83       	st	Z, r24
	
	/* Receive message length */
	message->length = mcp2515_read(MCP_RXB0DLC);
 16a:	85 e6       	ldi	r24, 0x65	; 101
 16c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp2515_read>
 170:	f8 01       	movw	r30, r16
 172:	81 83       	std	Z+1, r24	; 0x01
	
	/* Receive message data */
	for(uint8_t i = 0; i < message->length; i++){
 174:	88 23       	and	r24, r24
 176:	71 f0       	breq	.+28     	; 0x194 <CAN_receive_message+0x52>
 178:	c0 e0       	ldi	r28, 0x00	; 0
		message->data[i] = mcp2515_read(MCP_RXB0DM0	+ i);
 17a:	86 e6       	ldi	r24, 0x66	; 102
 17c:	8c 0f       	add	r24, r28
 17e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp2515_read>
 182:	f8 01       	movw	r30, r16
 184:	ec 0f       	add	r30, r28
 186:	f1 1d       	adc	r31, r1
 188:	82 83       	std	Z+2, r24	; 0x02
	
	/* Receive message length */
	message->length = mcp2515_read(MCP_RXB0DLC);
	
	/* Receive message data */
	for(uint8_t i = 0; i < message->length; i++){
 18a:	cf 5f       	subi	r28, 0xFF	; 255
 18c:	f8 01       	movw	r30, r16
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	c8 17       	cp	r28, r24
 192:	98 f3       	brcs	.-26     	; 0x17a <CAN_receive_message+0x38>
		message->data[i] = mcp2515_read(MCP_RXB0DM0	+ i);
	}

	mcp2515_bit_modify(MCP_CANINTF, 0x03, 0x00);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	63 e0       	ldi	r22, 0x03	; 3
 198:	8c e2       	ldi	r24, 0x2C	; 44
 19a:	0e 94 8c 01 	call	0x318	; 0x318 <mcp2515_bit_modify>
}
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <can_debugging_test_send>:


	
void can_debugging_test_send(void){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	2a 97       	sbiw	r28, 0x0a	; 10
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	de bf       	out	0x3e, r29	; 62
		CAN_message test;
		test.id = 254;
 1b4:	8e ef       	ldi	r24, 0xFE	; 254
 1b6:	89 83       	std	Y+1, r24	; 0x01
		test.length = 8;
 1b8:	88 e0       	ldi	r24, 0x08	; 8
 1ba:	8a 83       	std	Y+2, r24	; 0x02
		test.data[0] = 0x00;
 1bc:	1b 82       	std	Y+3, r1	; 0x03
		test.data[1] = 0x01;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	8c 83       	std	Y+4, r24	; 0x04
		test.data[2] = 0x02;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	8d 83       	std	Y+5, r24	; 0x05
		test.data[3] = 0x03;
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	8e 83       	std	Y+6, r24	; 0x06
		test.data[4] = 0x04;
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	8f 83       	std	Y+7, r24	; 0x07
		test.data[5] = 0x05;
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	88 87       	std	Y+8, r24	; 0x08
		test.data[6] = 0x06;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	89 87       	std	Y+9, r24	; 0x09
		test.data[7] = 0x07;
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	8a 87       	std	Y+10, r24	; 0x0a
		CAN_send_message(&test);
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 6f 00 	call	0xde	; 0xde <CAN_send_message>
}
 1e2:	2a 96       	adiw	r28, 0x0a	; 10
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <__vector_34>:



ISR(PORTB_PORT_vect,){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	CAN_receive_message(&reception_container);
 210:	81 e1       	ldi	r24, 0x11	; 17
 212:	98 e2       	ldi	r25, 0x28	; 40
 214:	0e 94 a1 00 	call	0x142	; 0x142 <CAN_receive_message>
	printf("here %d\n\r", reception_container.data[0]);
 218:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <reception_container+0x2>
 21c:	1f 92       	push	r1
 21e:	8f 93       	push	r24
 220:	86 e7       	ldi	r24, 0x76	; 118
 222:	9a e4       	ldi	r25, 0x4A	; 74
 224:	9f 93       	push	r25
 226:	8f 93       	push	r24
 228:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printf>
	mcp2515_bit_modify(MCP_CANINTF, 0x03, 0x00);
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	8c e2       	ldi	r24, 0x2C	; 44
 232:	0e 94 8c 01 	call	0x318	; 0x318 <mcp2515_bit_modify>
	VPORTB.INTFLAGS = (0xFF);
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	87 b9       	out	0x07, r24	; 7
}
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <system_init>:
#include <util/delay.h>



void system_init(void){
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);
 264:	88 ed       	ldi	r24, 0xD8	; 216
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	84 bf       	out	0x34, r24	; 52
 26c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, !CLKCTRL_CLKOUT_bm | CLKCTRL_CLKSEL_OSC20M_gc);
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	84 bf       	out	0x34, r24	; 52
 276:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	WDT.CTRLA = WDT_PERIOD_OFF_gc | WDT_WINDOW_OFF_gc;
 27a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 27e:	08 95       	ret

00000280 <main>:
}


int main(void)
{
    system_init();
 280:	0e 94 32 01 	call	0x264	; 0x264 <system_init>
    USART3_init();
 284:	0e 94 4c 02 	call	0x498	; 0x498 <USART3_init>
	spi_init();
 288:	0e 94 23 02 	call	0x446	; 0x446 <spi_init>
    slave_select();
 28c:	0e 94 32 02 	call	0x464	; 0x464 <slave_select>
	mcp2515_init();
 290:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_init>
    while (1) 
    {
			//printf("%d\n\r", PORTA.DIR);
//         printf("Counter value is: %d\n\r", 0);
//         _delay_ms(500);
		can_debugging_test_send();
 294:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <can_debugging_test_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	2f e7       	ldi	r18, 0x7F	; 127
 29a:	84 e8       	ldi	r24, 0x84	; 132
 29c:	9e e1       	ldi	r25, 0x1E	; 30
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x1e>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x28>
 2a8:	00 00       	nop
 2aa:	f4 cf       	rjmp	.-24     	; 0x294 <main+0x14>

000002ac <mcp2515_reset>:
	slave_select();
	spi_send(MCP_READ_STATUS);
	return spi_receive();
	slave_deselect();
	_delay_ms(10);
}
 2ac:	0e 94 32 02 	call	0x464	; 0x464 <slave_select>
 2b0:	80 ec       	ldi	r24, 0xC0	; 192
 2b2:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 2b6:	0e 94 36 02 	call	0x46c	; 0x46c <slave_deselect>
 2ba:	87 ea       	ldi	r24, 0xA7	; 167
 2bc:	91 e6       	ldi	r25, 0x61	; 97
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <mcp2515_reset+0x12>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <mcp2515_reset+0x18>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <mcp2515_write>:
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	d8 2f       	mov	r29, r24
 2ce:	c6 2f       	mov	r28, r22
 2d0:	0e 94 32 02 	call	0x464	; 0x464 <slave_select>
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 2da:	8d 2f       	mov	r24, r29
 2dc:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 2e0:	8c 2f       	mov	r24, r28
 2e2:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 2e6:	0e 94 36 02 	call	0x46c	; 0x46c <slave_deselect>
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <mcp2515_read>:
 2f0:	cf 93       	push	r28
 2f2:	c8 2f       	mov	r28, r24
 2f4:	0e 94 32 02 	call	0x464	; 0x464 <slave_select>
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 2fe:	8c 2f       	mov	r24, r28
 300:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 30a:	c0 91 c4 08 	lds	r28, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
 30e:	0e 94 36 02 	call	0x46c	; 0x46c <slave_deselect>
 312:	8c 2f       	mov	r24, r28
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <mcp2515_bit_modify>:
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	18 2f       	mov	r17, r24
 320:	d6 2f       	mov	r29, r22
 322:	c4 2f       	mov	r28, r20
 324:	0e 94 32 02 	call	0x464	; 0x464 <slave_select>
 328:	85 e0       	ldi	r24, 0x05	; 5
 32a:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 32e:	81 2f       	mov	r24, r17
 330:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 334:	8d 2f       	mov	r24, r29
 336:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 33a:	8c 2f       	mov	r24, r28
 33c:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
 340:	0e 94 36 02 	call	0x46c	; 0x46c <slave_deselect>
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	08 95       	ret

0000034c <mcp2515_set_mode>:

void mcp2515_set_mode(uint8_t mode){
	mcp2515_write(MCP_CANCTRL, mode);
 34c:	68 2f       	mov	r22, r24
 34e:	8f e0       	ldi	r24, 0x0F	; 15
 350:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
 354:	83 ec       	ldi	r24, 0xC3	; 195
 356:	99 e0       	ldi	r25, 0x09	; 9
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <mcp2515_set_mode+0xc>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <mcp2515_set_mode+0x12>
 35e:	00 00       	nop
 360:	08 95       	ret

00000362 <mcp2515_request_to_send>:
	_delay_ms(1);
}

void mcp2515_request_to_send(char buffer){
 362:	cf 93       	push	r28
 364:	c8 2f       	mov	r28, r24
	slave_select();
 366:	0e 94 32 02 	call	0x464	; 0x464 <slave_select>
	switch(buffer){
 36a:	c1 33       	cpi	r28, 0x31	; 49
 36c:	69 f0       	breq	.+26     	; 0x388 <mcp2515_request_to_send+0x26>
 36e:	18 f4       	brcc	.+6      	; 0x376 <mcp2515_request_to_send+0x14>
 370:	c0 33       	cpi	r28, 0x30	; 48
 372:	31 f0       	breq	.+12     	; 0x380 <mcp2515_request_to_send+0x1e>
 374:	15 c0       	rjmp	.+42     	; 0x3a0 <mcp2515_request_to_send+0x3e>
 376:	c2 33       	cpi	r28, 0x32	; 50
 378:	59 f0       	breq	.+22     	; 0x390 <mcp2515_request_to_send+0x2e>
 37a:	c1 36       	cpi	r28, 0x61	; 97
 37c:	69 f0       	breq	.+26     	; 0x398 <mcp2515_request_to_send+0x36>
 37e:	10 c0       	rjmp	.+32     	; 0x3a0 <mcp2515_request_to_send+0x3e>
		case '0':
			spi_send(MCP_RTS_TX0);
 380:	81 e8       	ldi	r24, 0x81	; 129
 382:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
		break;
 386:	14 c0       	rjmp	.+40     	; 0x3b0 <mcp2515_request_to_send+0x4e>
		
		case '1':
			spi_send(MCP_RTS_TX1);
 388:	82 e8       	ldi	r24, 0x82	; 130
 38a:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
		break;
 38e:	10 c0       	rjmp	.+32     	; 0x3b0 <mcp2515_request_to_send+0x4e>
		
		case '2':
			spi_send(MCP_RTS_TX2);
 390:	84 e8       	ldi	r24, 0x84	; 132
 392:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
		break;
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <mcp2515_request_to_send+0x4e>
		
		case 'a':
			spi_send(MCP_RTS_ALL);
 398:	87 e8       	ldi	r24, 0x87	; 135
 39a:	0e 94 3a 02 	call	0x474	; 0x474 <spi_send>
		break;
 39e:	08 c0       	rjmp	.+16     	; 0x3b0 <mcp2515_request_to_send+0x4e>
		
		default:
		printf("Invalid buffer, try again. Buffer is a char\n\r");
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	9a e4       	ldi	r25, 0x4A	; 74
 3a4:	9f 93       	push	r25
 3a6:	8f 93       	push	r24
 3a8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printf>
		break;
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
	}
	slave_deselect();
 3b0:	0e 94 36 02 	call	0x46c	; 0x46c <slave_deselect>
}
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <mcp2515_init>:

void mcp2515_init(void){
	spi_init();
 3b8:	0e 94 23 02 	call	0x446	; 0x446 <spi_init>
	
	mcp2515_reset();
 3bc:	0e 94 56 01 	call	0x2ac	; 0x2ac <mcp2515_reset>

	if((mcp2515_read(MCP_CANSTAT) & MODE_MASK) != MODE_CONFIG){
 3c0:	8e e0       	ldi	r24, 0x0E	; 14
 3c2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp2515_read>
 3c6:	80 7e       	andi	r24, 0xE0	; 224
 3c8:	80 38       	cpi	r24, 0x80	; 128
 3ca:	41 f0       	breq	.+16     	; 0x3dc <mcp2515_init+0x24>
		printf("CAN CONTROLLER NOT IN CONFIG MODE\n\r");
 3cc:	8e ea       	ldi	r24, 0xAE	; 174
 3ce:	9a e4       	ldi	r25, 0x4A	; 74
 3d0:	9f 93       	push	r25
 3d2:	8f 93       	push	r24
 3d4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printf>
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
	}

	sei();														//note to self, pins Px2 and Px6 of every register are capable of asynchronous interrupt detection on node 3, using PB2
 3dc:	78 94       	sei

	/* Enable interrupt for receive buffer 0 and receive buffer 1 */

	VPORTB.DIR	|= 0x00;
 3de:	84 b1       	in	r24, 0x04	; 4
 3e0:	84 b9       	out	0x04, r24	; 4
	PORTB.PIN2CTRL	= 0x03;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <__TEXT_REGION_LENGTH__+0x700432>
	

	
	mcp2515_write(MCP_CNF1, 0b10000001);						/* SJW = 1 TQ and BRP = 3 */
 3e8:	61 e8       	ldi	r22, 0x81	; 129
 3ea:	8a e2       	ldi	r24, 0x2A	; 42
 3ec:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	mcp2515_write(MCP_CNF2, 0b10101101);						/* Prop_seg = 3 TQ and Phase_seg_1 = 6 TQ */
 3f0:	6d ea       	ldi	r22, 0xAD	; 173
 3f2:	89 e2       	ldi	r24, 0x29	; 41
 3f4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
 	mcp2515_write(MCP_CNF3, 0b00000101);						/* Phase_seg_2 = 6 TQ */
 3f8:	65 e0       	ldi	r22, 0x05	; 5
 3fa:	88 e2       	ldi	r24, 0x28	; 40
 3fc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	mcp2515_bit_modify(MCP_CANINTF, 0x03, 0x00);
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	8c e2       	ldi	r24, 0x2C	; 44
 406:	0e 94 8c 01 	call	0x318	; 0x318 <mcp2515_bit_modify>
/*
	mcp2515_write(MCP_CNF3, 0x05);						// Phase_seg_2 = 6 TQ 
	mcp2515_write(MCP_CNF2, 0xa1);						// Prop_seg = 2 TQ and Phase_seg_1 = 7 TQ 
	mcp2515_write(MCP_CNF1, 0x82);
*/
	mcp2515_write(MCP_CANINTE, 0x03);
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	8b e2       	ldi	r24, 0x2B	; 43
 40e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcp2515_write>
	
/*	printf("%i\n\r", mcp2515_read(MCP_CNF1));*/
	printf("Config done, switching to normal mode now\n\r");
 412:	82 ed       	ldi	r24, 0xD2	; 210
 414:	9a e4       	ldi	r25, 0x4A	; 74
 416:	9f 93       	push	r25
 418:	8f 93       	push	r24
 41a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printf>

	mcp2515_set_mode(MODE_LOOPBACK);
 41e:	80 e4       	ldi	r24, 0x40	; 64
 420:	0e 94 a6 01 	call	0x34c	; 0x34c <mcp2515_set_mode>
	if((mcp2515_read(MCP_CANSTAT) & MODE_MASK) != MODE_LOOPBACK){
 424:	8e e0       	ldi	r24, 0x0E	; 14
 426:	0e 94 78 01 	call	0x2f0	; 0x2f0 <mcp2515_read>
 42a:	80 7e       	andi	r24, 0xE0	; 224
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	80 34       	cpi	r24, 0x40	; 64
 432:	41 f0       	breq	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		printf("CAN CONTROLLER NOT IN normal MODE\n\r");
 434:	8e ef       	ldi	r24, 0xFE	; 254
 436:	9a e4       	ldi	r25, 0x4A	; 74
 438:	9f 93       	push	r25
 43a:	8f 93       	push	r24
 43c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printf>
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	08 95       	ret

00000446 <spi_init>:
#define F_CPU 10000000UL
#include <avr/io.h>
#include <stdio.h>

void spi_init(void){
	PORTA.DIRSET	= (PIN4_bm)|(PIN6_bm)|(PIN7_bm);
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	f4 e0       	ldi	r31, 0x04	; 4
 44a:	80 ed       	ldi	r24, 0xD0	; 208
 44c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR	= (PIN5_bm);
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	82 83       	std	Z+2, r24	; 0x02
 	SPI0.CTRLA		|= (SPI_MASTER_bm)|(SPI_PRESC_DIV64_gc)|(SPI_ENABLE_bm) ;
 452:	e0 ec       	ldi	r30, 0xC0	; 192
 454:	f8 e0       	ldi	r31, 0x08	; 8
 456:	80 81       	ld	r24, Z
 458:	85 62       	ori	r24, 0x25	; 37
 45a:	80 83       	st	Z, r24
 	SPI0.CTRLB		|= (SPI_MODE0_bm);
 45c:	81 81       	ldd	r24, Z+1	; 0x01
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	81 83       	std	Z+1, r24	; 0x01
 462:	08 95       	ret

00000464 <slave_select>:
}

void slave_select(void){
	PORTA.OUTCLR = (PIN7_bm);
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
 46a:	08 95       	ret

0000046c <slave_deselect>:
}

void slave_deselect(void){
	PORTA.OUTSET = (PIN7_bm);
 46c:	80 e8       	ldi	r24, 0x80	; 128
 46e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
 472:	08 95       	ret

00000474 <spi_send>:
}

void spi_send(uint8_t data){
	SPI0.DATA = data;
 474:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
	while(!(SPI0.INTFLAGS & SPI_IF_bm));
 478:	e0 ec       	ldi	r30, 0xC0	; 192
 47a:	f8 e0       	ldi	r31, 0x08	; 8
 47c:	83 81       	ldd	r24, Z+3	; 0x03
 47e:	88 23       	and	r24, r24
 480:	ec f7       	brge	.-6      	; 0x47c <spi_send+0x8>
}
 482:	08 95       	ret

00000484 <USART3_printChar>:
#include <util/delay.h>
#include <stdio.h>

static void USART3_sendChar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 484:	e0 e6       	ldi	r30, 0x60	; 96
 486:	f8 e0       	ldi	r31, 0x08	; 8
 488:	94 81       	ldd	r25, Z+4	; 0x04
 48a:	95 ff       	sbrs	r25, 5
 48c:	fd cf       	rjmp	.-6      	; 0x488 <USART3_printChar+0x4>
	{
		;
	}
	USART3.TXDATAL = c;
 48e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x700862>

static int USART3_printChar(char c, FILE *stream)
{
	USART3_sendChar(c);
	return 0;
}
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 95       	ret

00000498 <USART3_init>:


void USART3_init(void)
{
	PORTB.DIR |= PIN0_bm;
 498:	e0 e2       	ldi	r30, 0x20	; 32
 49a:	f4 e0       	ldi	r31, 0x04	; 4
 49c:	80 81       	ld	r24, Z
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24
	
	
	
	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600);
 4a2:	e0 e6       	ldi	r30, 0x60	; 96
 4a4:	f8 e0       	ldi	r31, 0x08	; 8
 4a6:	87 e4       	ldi	r24, 0x47	; 71
 4a8:	90 e1       	ldi	r25, 0x10	; 16
 4aa:	80 87       	std	Z+8, r24	; 0x08
 4ac:	91 87       	std	Z+9, r25	; 0x09
	
	USART3.CTRLB |= USART_TXEN_bm;
 4ae:	86 81       	ldd	r24, Z+6	; 0x06
 4b0:	80 64       	ori	r24, 0x40	; 64
 4b2:	86 83       	std	Z+6, r24	; 0x06
	

	static FILE USART_stream = FDEV_SETUP_STREAM(USART3_printChar, NULL, _FDEV_SETUP_WRITE);
		stdout = &USART_stream;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	98 e2       	ldi	r25, 0x28	; 40
 4b8:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <__iob+0x2>
 4bc:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <__iob+0x3>
 4c0:	08 95       	ret

000004c2 <printf>:
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e7 e6       	ldi	r30, 0x67	; 103
 4c8:	f2 e0       	ldi	r31, 0x02	; 2
 4ca:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__prologue_saves__+0x20>
 4ce:	ae 01       	movw	r20, r28
 4d0:	4b 5f       	subi	r20, 0xFB	; 251
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	fa 01       	movw	r30, r20
 4d6:	61 91       	ld	r22, Z+
 4d8:	71 91       	ld	r23, Z+
 4da:	af 01       	movw	r20, r30
 4dc:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <__iob+0x2>
 4e0:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <__iob+0x3>
 4e4:	0e 94 77 02 	call	0x4ee	; 0x4ee <vfprintf>
 4e8:	e2 e0       	ldi	r30, 0x02	; 2
 4ea:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__epilogue_restores__+0x20>

000004ee <vfprintf>:
 4ee:	ab e0       	ldi	r26, 0x0B	; 11
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ed e7       	ldi	r30, 0x7D	; 125
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__prologue_saves__>
 4fa:	6c 01       	movw	r12, r24
 4fc:	7b 01       	movw	r14, r22
 4fe:	8a 01       	movw	r16, r20
 500:	fc 01       	movw	r30, r24
 502:	16 82       	std	Z+6, r1	; 0x06
 504:	17 82       	std	Z+7, r1	; 0x07
 506:	83 81       	ldd	r24, Z+3	; 0x03
 508:	81 ff       	sbrs	r24, 1
 50a:	cc c1       	rjmp	.+920    	; 0x8a4 <vfprintf+0x3b6>
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	3c 01       	movw	r6, r24
 512:	f6 01       	movw	r30, r12
 514:	93 81       	ldd	r25, Z+3	; 0x03
 516:	f7 01       	movw	r30, r14
 518:	93 fd       	sbrc	r25, 3
 51a:	85 91       	lpm	r24, Z+
 51c:	93 ff       	sbrs	r25, 3
 51e:	81 91       	ld	r24, Z+
 520:	7f 01       	movw	r14, r30
 522:	88 23       	and	r24, r24
 524:	09 f4       	brne	.+2      	; 0x528 <vfprintf+0x3a>
 526:	ba c1       	rjmp	.+884    	; 0x89c <vfprintf+0x3ae>
 528:	85 32       	cpi	r24, 0x25	; 37
 52a:	39 f4       	brne	.+14     	; 0x53a <vfprintf+0x4c>
 52c:	93 fd       	sbrc	r25, 3
 52e:	85 91       	lpm	r24, Z+
 530:	93 ff       	sbrs	r25, 3
 532:	81 91       	ld	r24, Z+
 534:	7f 01       	movw	r14, r30
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	29 f4       	brne	.+10     	; 0x544 <vfprintf+0x56>
 53a:	b6 01       	movw	r22, r12
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 542:	e7 cf       	rjmp	.-50     	; 0x512 <vfprintf+0x24>
 544:	91 2c       	mov	r9, r1
 546:	21 2c       	mov	r2, r1
 548:	31 2c       	mov	r3, r1
 54a:	ff e1       	ldi	r31, 0x1F	; 31
 54c:	f3 15       	cp	r31, r3
 54e:	d8 f0       	brcs	.+54     	; 0x586 <vfprintf+0x98>
 550:	8b 32       	cpi	r24, 0x2B	; 43
 552:	79 f0       	breq	.+30     	; 0x572 <vfprintf+0x84>
 554:	38 f4       	brcc	.+14     	; 0x564 <vfprintf+0x76>
 556:	80 32       	cpi	r24, 0x20	; 32
 558:	79 f0       	breq	.+30     	; 0x578 <vfprintf+0x8a>
 55a:	83 32       	cpi	r24, 0x23	; 35
 55c:	a1 f4       	brne	.+40     	; 0x586 <vfprintf+0x98>
 55e:	23 2d       	mov	r18, r3
 560:	20 61       	ori	r18, 0x10	; 16
 562:	1d c0       	rjmp	.+58     	; 0x59e <vfprintf+0xb0>
 564:	8d 32       	cpi	r24, 0x2D	; 45
 566:	61 f0       	breq	.+24     	; 0x580 <vfprintf+0x92>
 568:	80 33       	cpi	r24, 0x30	; 48
 56a:	69 f4       	brne	.+26     	; 0x586 <vfprintf+0x98>
 56c:	23 2d       	mov	r18, r3
 56e:	21 60       	ori	r18, 0x01	; 1
 570:	16 c0       	rjmp	.+44     	; 0x59e <vfprintf+0xb0>
 572:	83 2d       	mov	r24, r3
 574:	82 60       	ori	r24, 0x02	; 2
 576:	38 2e       	mov	r3, r24
 578:	e3 2d       	mov	r30, r3
 57a:	e4 60       	ori	r30, 0x04	; 4
 57c:	3e 2e       	mov	r3, r30
 57e:	2a c0       	rjmp	.+84     	; 0x5d4 <vfprintf+0xe6>
 580:	f3 2d       	mov	r31, r3
 582:	f8 60       	ori	r31, 0x08	; 8
 584:	1d c0       	rjmp	.+58     	; 0x5c0 <vfprintf+0xd2>
 586:	37 fc       	sbrc	r3, 7
 588:	2d c0       	rjmp	.+90     	; 0x5e4 <vfprintf+0xf6>
 58a:	20 ed       	ldi	r18, 0xD0	; 208
 58c:	28 0f       	add	r18, r24
 58e:	2a 30       	cpi	r18, 0x0A	; 10
 590:	40 f0       	brcs	.+16     	; 0x5a2 <vfprintf+0xb4>
 592:	8e 32       	cpi	r24, 0x2E	; 46
 594:	b9 f4       	brne	.+46     	; 0x5c4 <vfprintf+0xd6>
 596:	36 fc       	sbrc	r3, 6
 598:	81 c1       	rjmp	.+770    	; 0x89c <vfprintf+0x3ae>
 59a:	23 2d       	mov	r18, r3
 59c:	20 64       	ori	r18, 0x40	; 64
 59e:	32 2e       	mov	r3, r18
 5a0:	19 c0       	rjmp	.+50     	; 0x5d4 <vfprintf+0xe6>
 5a2:	36 fe       	sbrs	r3, 6
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <vfprintf+0xc4>
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	98 9e       	mul	r9, r24
 5aa:	20 0d       	add	r18, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	92 2e       	mov	r9, r18
 5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <vfprintf+0xe6>
 5b2:	ea e0       	ldi	r30, 0x0A	; 10
 5b4:	2e 9e       	mul	r2, r30
 5b6:	20 0d       	add	r18, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	22 2e       	mov	r2, r18
 5bc:	f3 2d       	mov	r31, r3
 5be:	f0 62       	ori	r31, 0x20	; 32
 5c0:	3f 2e       	mov	r3, r31
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <vfprintf+0xe6>
 5c4:	8c 36       	cpi	r24, 0x6C	; 108
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <vfprintf+0xe2>
 5c8:	83 2d       	mov	r24, r3
 5ca:	80 68       	ori	r24, 0x80	; 128
 5cc:	38 2e       	mov	r3, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <vfprintf+0xe6>
 5d0:	88 36       	cpi	r24, 0x68	; 104
 5d2:	41 f4       	brne	.+16     	; 0x5e4 <vfprintf+0xf6>
 5d4:	f7 01       	movw	r30, r14
 5d6:	93 fd       	sbrc	r25, 3
 5d8:	85 91       	lpm	r24, Z+
 5da:	93 ff       	sbrs	r25, 3
 5dc:	81 91       	ld	r24, Z+
 5de:	7f 01       	movw	r14, r30
 5e0:	81 11       	cpse	r24, r1
 5e2:	b3 cf       	rjmp	.-154    	; 0x54a <vfprintf+0x5c>
 5e4:	98 2f       	mov	r25, r24
 5e6:	9f 7d       	andi	r25, 0xDF	; 223
 5e8:	95 54       	subi	r25, 0x45	; 69
 5ea:	93 30       	cpi	r25, 0x03	; 3
 5ec:	28 f4       	brcc	.+10     	; 0x5f8 <vfprintf+0x10a>
 5ee:	0c 5f       	subi	r16, 0xFC	; 252
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	9f e3       	ldi	r25, 0x3F	; 63
 5f4:	99 83       	std	Y+1, r25	; 0x01
 5f6:	0d c0       	rjmp	.+26     	; 0x612 <vfprintf+0x124>
 5f8:	83 36       	cpi	r24, 0x63	; 99
 5fa:	31 f0       	breq	.+12     	; 0x608 <vfprintf+0x11a>
 5fc:	83 37       	cpi	r24, 0x73	; 115
 5fe:	71 f0       	breq	.+28     	; 0x61c <vfprintf+0x12e>
 600:	83 35       	cpi	r24, 0x53	; 83
 602:	09 f0       	breq	.+2      	; 0x606 <vfprintf+0x118>
 604:	59 c0       	rjmp	.+178    	; 0x6b8 <vfprintf+0x1ca>
 606:	21 c0       	rjmp	.+66     	; 0x64a <vfprintf+0x15c>
 608:	f8 01       	movw	r30, r16
 60a:	80 81       	ld	r24, Z
 60c:	89 83       	std	Y+1, r24	; 0x01
 60e:	0e 5f       	subi	r16, 0xFE	; 254
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	88 24       	eor	r8, r8
 614:	83 94       	inc	r8
 616:	91 2c       	mov	r9, r1
 618:	53 01       	movw	r10, r6
 61a:	13 c0       	rjmp	.+38     	; 0x642 <vfprintf+0x154>
 61c:	28 01       	movw	r4, r16
 61e:	f2 e0       	ldi	r31, 0x02	; 2
 620:	4f 0e       	add	r4, r31
 622:	51 1c       	adc	r5, r1
 624:	f8 01       	movw	r30, r16
 626:	a0 80       	ld	r10, Z
 628:	b1 80       	ldd	r11, Z+1	; 0x01
 62a:	36 fe       	sbrs	r3, 6
 62c:	03 c0       	rjmp	.+6      	; 0x634 <vfprintf+0x146>
 62e:	69 2d       	mov	r22, r9
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <vfprintf+0x14a>
 634:	6f ef       	ldi	r22, 0xFF	; 255
 636:	7f ef       	ldi	r23, 0xFF	; 255
 638:	c5 01       	movw	r24, r10
 63a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <strnlen>
 63e:	4c 01       	movw	r8, r24
 640:	82 01       	movw	r16, r4
 642:	f3 2d       	mov	r31, r3
 644:	ff 77       	andi	r31, 0x7F	; 127
 646:	3f 2e       	mov	r3, r31
 648:	16 c0       	rjmp	.+44     	; 0x676 <vfprintf+0x188>
 64a:	28 01       	movw	r4, r16
 64c:	22 e0       	ldi	r18, 0x02	; 2
 64e:	42 0e       	add	r4, r18
 650:	51 1c       	adc	r5, r1
 652:	f8 01       	movw	r30, r16
 654:	a0 80       	ld	r10, Z
 656:	b1 80       	ldd	r11, Z+1	; 0x01
 658:	36 fe       	sbrs	r3, 6
 65a:	03 c0       	rjmp	.+6      	; 0x662 <vfprintf+0x174>
 65c:	69 2d       	mov	r22, r9
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <vfprintf+0x178>
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	7f ef       	ldi	r23, 0xFF	; 255
 666:	c5 01       	movw	r24, r10
 668:	0e 94 58 04 	call	0x8b0	; 0x8b0 <strnlen_P>
 66c:	4c 01       	movw	r8, r24
 66e:	f3 2d       	mov	r31, r3
 670:	f0 68       	ori	r31, 0x80	; 128
 672:	3f 2e       	mov	r3, r31
 674:	82 01       	movw	r16, r4
 676:	33 fc       	sbrc	r3, 3
 678:	1b c0       	rjmp	.+54     	; 0x6b0 <vfprintf+0x1c2>
 67a:	82 2d       	mov	r24, r2
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	88 16       	cp	r8, r24
 680:	99 06       	cpc	r9, r25
 682:	b0 f4       	brcc	.+44     	; 0x6b0 <vfprintf+0x1c2>
 684:	b6 01       	movw	r22, r12
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 68e:	2a 94       	dec	r2
 690:	f4 cf       	rjmp	.-24     	; 0x67a <vfprintf+0x18c>
 692:	f5 01       	movw	r30, r10
 694:	37 fc       	sbrc	r3, 7
 696:	85 91       	lpm	r24, Z+
 698:	37 fe       	sbrs	r3, 7
 69a:	81 91       	ld	r24, Z+
 69c:	5f 01       	movw	r10, r30
 69e:	b6 01       	movw	r22, r12
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 6a6:	21 10       	cpse	r2, r1
 6a8:	2a 94       	dec	r2
 6aa:	21 e0       	ldi	r18, 0x01	; 1
 6ac:	82 1a       	sub	r8, r18
 6ae:	91 08       	sbc	r9, r1
 6b0:	81 14       	cp	r8, r1
 6b2:	91 04       	cpc	r9, r1
 6b4:	71 f7       	brne	.-36     	; 0x692 <vfprintf+0x1a4>
 6b6:	e8 c0       	rjmp	.+464    	; 0x888 <vfprintf+0x39a>
 6b8:	84 36       	cpi	r24, 0x64	; 100
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <vfprintf+0x1d2>
 6bc:	89 36       	cpi	r24, 0x69	; 105
 6be:	41 f5       	brne	.+80     	; 0x710 <vfprintf+0x222>
 6c0:	f8 01       	movw	r30, r16
 6c2:	37 fe       	sbrs	r3, 7
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <vfprintf+0x1e6>
 6c6:	60 81       	ld	r22, Z
 6c8:	71 81       	ldd	r23, Z+1	; 0x01
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	93 81       	ldd	r25, Z+3	; 0x03
 6ce:	0c 5f       	subi	r16, 0xFC	; 252
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <vfprintf+0x1f6>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	07 2e       	mov	r0, r23
 6da:	00 0c       	add	r0, r0
 6dc:	88 0b       	sbc	r24, r24
 6de:	99 0b       	sbc	r25, r25
 6e0:	0e 5f       	subi	r16, 0xFE	; 254
 6e2:	1f 4f       	sbci	r17, 0xFF	; 255
 6e4:	f3 2d       	mov	r31, r3
 6e6:	ff 76       	andi	r31, 0x6F	; 111
 6e8:	3f 2e       	mov	r3, r31
 6ea:	97 ff       	sbrs	r25, 7
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <vfprintf+0x212>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	f0 68       	ori	r31, 0x80	; 128
 6fe:	3f 2e       	mov	r3, r31
 700:	2a e0       	ldi	r18, 0x0A	; 10
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	a3 01       	movw	r20, r6
 706:	0e 94 aa 04 	call	0x954	; 0x954 <__ultoa_invert>
 70a:	88 2e       	mov	r8, r24
 70c:	86 18       	sub	r8, r6
 70e:	45 c0       	rjmp	.+138    	; 0x79a <vfprintf+0x2ac>
 710:	85 37       	cpi	r24, 0x75	; 117
 712:	31 f4       	brne	.+12     	; 0x720 <vfprintf+0x232>
 714:	23 2d       	mov	r18, r3
 716:	2f 7e       	andi	r18, 0xEF	; 239
 718:	b2 2e       	mov	r11, r18
 71a:	2a e0       	ldi	r18, 0x0A	; 10
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	25 c0       	rjmp	.+74     	; 0x76a <vfprintf+0x27c>
 720:	93 2d       	mov	r25, r3
 722:	99 7f       	andi	r25, 0xF9	; 249
 724:	b9 2e       	mov	r11, r25
 726:	8f 36       	cpi	r24, 0x6F	; 111
 728:	c1 f0       	breq	.+48     	; 0x75a <vfprintf+0x26c>
 72a:	18 f4       	brcc	.+6      	; 0x732 <vfprintf+0x244>
 72c:	88 35       	cpi	r24, 0x58	; 88
 72e:	79 f0       	breq	.+30     	; 0x74e <vfprintf+0x260>
 730:	b5 c0       	rjmp	.+362    	; 0x89c <vfprintf+0x3ae>
 732:	80 37       	cpi	r24, 0x70	; 112
 734:	19 f0       	breq	.+6      	; 0x73c <vfprintf+0x24e>
 736:	88 37       	cpi	r24, 0x78	; 120
 738:	21 f0       	breq	.+8      	; 0x742 <vfprintf+0x254>
 73a:	b0 c0       	rjmp	.+352    	; 0x89c <vfprintf+0x3ae>
 73c:	e9 2f       	mov	r30, r25
 73e:	e0 61       	ori	r30, 0x10	; 16
 740:	be 2e       	mov	r11, r30
 742:	b4 fe       	sbrs	r11, 4
 744:	0d c0       	rjmp	.+26     	; 0x760 <vfprintf+0x272>
 746:	fb 2d       	mov	r31, r11
 748:	f4 60       	ori	r31, 0x04	; 4
 74a:	bf 2e       	mov	r11, r31
 74c:	09 c0       	rjmp	.+18     	; 0x760 <vfprintf+0x272>
 74e:	34 fe       	sbrs	r3, 4
 750:	0a c0       	rjmp	.+20     	; 0x766 <vfprintf+0x278>
 752:	29 2f       	mov	r18, r25
 754:	26 60       	ori	r18, 0x06	; 6
 756:	b2 2e       	mov	r11, r18
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0x278>
 75a:	28 e0       	ldi	r18, 0x08	; 8
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	05 c0       	rjmp	.+10     	; 0x76a <vfprintf+0x27c>
 760:	20 e1       	ldi	r18, 0x10	; 16
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x27c>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	32 e0       	ldi	r19, 0x02	; 2
 76a:	f8 01       	movw	r30, r16
 76c:	b7 fe       	sbrs	r11, 7
 76e:	07 c0       	rjmp	.+14     	; 0x77e <vfprintf+0x290>
 770:	60 81       	ld	r22, Z
 772:	71 81       	ldd	r23, Z+1	; 0x01
 774:	82 81       	ldd	r24, Z+2	; 0x02
 776:	93 81       	ldd	r25, Z+3	; 0x03
 778:	0c 5f       	subi	r16, 0xFC	; 252
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0x29c>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 5f       	subi	r16, 0xFE	; 254
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	a3 01       	movw	r20, r6
 78c:	0e 94 aa 04 	call	0x954	; 0x954 <__ultoa_invert>
 790:	88 2e       	mov	r8, r24
 792:	86 18       	sub	r8, r6
 794:	fb 2d       	mov	r31, r11
 796:	ff 77       	andi	r31, 0x7F	; 127
 798:	3f 2e       	mov	r3, r31
 79a:	36 fe       	sbrs	r3, 6
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <vfprintf+0x2ca>
 79e:	23 2d       	mov	r18, r3
 7a0:	2e 7f       	andi	r18, 0xFE	; 254
 7a2:	a2 2e       	mov	r10, r18
 7a4:	89 14       	cp	r8, r9
 7a6:	58 f4       	brcc	.+22     	; 0x7be <vfprintf+0x2d0>
 7a8:	34 fe       	sbrs	r3, 4
 7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <vfprintf+0x2d4>
 7ac:	32 fc       	sbrc	r3, 2
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <vfprintf+0x2d4>
 7b0:	83 2d       	mov	r24, r3
 7b2:	8e 7e       	andi	r24, 0xEE	; 238
 7b4:	a8 2e       	mov	r10, r24
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <vfprintf+0x2d4>
 7b8:	b8 2c       	mov	r11, r8
 7ba:	a3 2c       	mov	r10, r3
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x2d6>
 7be:	b8 2c       	mov	r11, r8
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x2d6>
 7c2:	b9 2c       	mov	r11, r9
 7c4:	a4 fe       	sbrs	r10, 4
 7c6:	0f c0       	rjmp	.+30     	; 0x7e6 <vfprintf+0x2f8>
 7c8:	fe 01       	movw	r30, r28
 7ca:	e8 0d       	add	r30, r8
 7cc:	f1 1d       	adc	r31, r1
 7ce:	80 81       	ld	r24, Z
 7d0:	80 33       	cpi	r24, 0x30	; 48
 7d2:	21 f4       	brne	.+8      	; 0x7dc <vfprintf+0x2ee>
 7d4:	9a 2d       	mov	r25, r10
 7d6:	99 7e       	andi	r25, 0xE9	; 233
 7d8:	a9 2e       	mov	r10, r25
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x300>
 7dc:	a2 fe       	sbrs	r10, 2
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x2fe>
 7e0:	b3 94       	inc	r11
 7e2:	b3 94       	inc	r11
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <vfprintf+0x300>
 7e6:	8a 2d       	mov	r24, r10
 7e8:	86 78       	andi	r24, 0x86	; 134
 7ea:	09 f0       	breq	.+2      	; 0x7ee <vfprintf+0x300>
 7ec:	b3 94       	inc	r11
 7ee:	a3 fc       	sbrc	r10, 3
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <vfprintf+0x326>
 7f2:	a0 fe       	sbrs	r10, 0
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x314>
 7f6:	b2 14       	cp	r11, r2
 7f8:	88 f4       	brcc	.+34     	; 0x81c <vfprintf+0x32e>
 7fa:	28 0c       	add	r2, r8
 7fc:	92 2c       	mov	r9, r2
 7fe:	9b 18       	sub	r9, r11
 800:	0e c0       	rjmp	.+28     	; 0x81e <vfprintf+0x330>
 802:	b2 14       	cp	r11, r2
 804:	60 f4       	brcc	.+24     	; 0x81e <vfprintf+0x330>
 806:	b6 01       	movw	r22, r12
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 810:	b3 94       	inc	r11
 812:	f7 cf       	rjmp	.-18     	; 0x802 <vfprintf+0x314>
 814:	b2 14       	cp	r11, r2
 816:	18 f4       	brcc	.+6      	; 0x81e <vfprintf+0x330>
 818:	2b 18       	sub	r2, r11
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x332>
 81c:	98 2c       	mov	r9, r8
 81e:	21 2c       	mov	r2, r1
 820:	a4 fe       	sbrs	r10, 4
 822:	10 c0       	rjmp	.+32     	; 0x844 <vfprintf+0x356>
 824:	b6 01       	movw	r22, r12
 826:	80 e3       	ldi	r24, 0x30	; 48
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 82e:	a2 fe       	sbrs	r10, 2
 830:	17 c0       	rjmp	.+46     	; 0x860 <vfprintf+0x372>
 832:	a1 fc       	sbrc	r10, 1
 834:	03 c0       	rjmp	.+6      	; 0x83c <vfprintf+0x34e>
 836:	88 e7       	ldi	r24, 0x78	; 120
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0x352>
 83c:	88 e5       	ldi	r24, 0x58	; 88
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	b6 01       	movw	r22, r12
 842:	0c c0       	rjmp	.+24     	; 0x85c <vfprintf+0x36e>
 844:	8a 2d       	mov	r24, r10
 846:	86 78       	andi	r24, 0x86	; 134
 848:	59 f0       	breq	.+22     	; 0x860 <vfprintf+0x372>
 84a:	a1 fe       	sbrs	r10, 1
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x364>
 84e:	8b e2       	ldi	r24, 0x2B	; 43
 850:	01 c0       	rjmp	.+2      	; 0x854 <vfprintf+0x366>
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	a7 fc       	sbrc	r10, 7
 856:	8d e2       	ldi	r24, 0x2D	; 45
 858:	b6 01       	movw	r22, r12
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 860:	89 14       	cp	r8, r9
 862:	38 f4       	brcc	.+14     	; 0x872 <vfprintf+0x384>
 864:	b6 01       	movw	r22, r12
 866:	80 e3       	ldi	r24, 0x30	; 48
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 86e:	9a 94       	dec	r9
 870:	f7 cf       	rjmp	.-18     	; 0x860 <vfprintf+0x372>
 872:	8a 94       	dec	r8
 874:	f3 01       	movw	r30, r6
 876:	e8 0d       	add	r30, r8
 878:	f1 1d       	adc	r31, r1
 87a:	80 81       	ld	r24, Z
 87c:	b6 01       	movw	r22, r12
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 884:	81 10       	cpse	r8, r1
 886:	f5 cf       	rjmp	.-22     	; 0x872 <vfprintf+0x384>
 888:	22 20       	and	r2, r2
 88a:	09 f4       	brne	.+2      	; 0x88e <vfprintf+0x3a0>
 88c:	42 ce       	rjmp	.-892    	; 0x512 <vfprintf+0x24>
 88e:	b6 01       	movw	r22, r12
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 6e 04 	call	0x8dc	; 0x8dc <fputc>
 898:	2a 94       	dec	r2
 89a:	f6 cf       	rjmp	.-20     	; 0x888 <vfprintf+0x39a>
 89c:	f6 01       	movw	r30, r12
 89e:	86 81       	ldd	r24, Z+6	; 0x06
 8a0:	97 81       	ldd	r25, Z+7	; 0x07
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x3ba>
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	2b 96       	adiw	r28, 0x0b	; 11
 8aa:	e2 e1       	ldi	r30, 0x12	; 18
 8ac:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__epilogue_restores__>

000008b0 <strnlen_P>:
 8b0:	fc 01       	movw	r30, r24
 8b2:	05 90       	lpm	r0, Z+
 8b4:	61 50       	subi	r22, 0x01	; 1
 8b6:	70 40       	sbci	r23, 0x00	; 0
 8b8:	01 10       	cpse	r0, r1
 8ba:	d8 f7       	brcc	.-10     	; 0x8b2 <strnlen_P+0x2>
 8bc:	80 95       	com	r24
 8be:	90 95       	com	r25
 8c0:	8e 0f       	add	r24, r30
 8c2:	9f 1f       	adc	r25, r31
 8c4:	08 95       	ret

000008c6 <strnlen>:
 8c6:	fc 01       	movw	r30, r24
 8c8:	61 50       	subi	r22, 0x01	; 1
 8ca:	70 40       	sbci	r23, 0x00	; 0
 8cc:	01 90       	ld	r0, Z+
 8ce:	01 10       	cpse	r0, r1
 8d0:	d8 f7       	brcc	.-10     	; 0x8c8 <strnlen+0x2>
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	8e 0f       	add	r24, r30
 8d8:	9f 1f       	adc	r25, r31
 8da:	08 95       	ret

000008dc <fputc>:
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	fb 01       	movw	r30, r22
 8e6:	23 81       	ldd	r18, Z+3	; 0x03
 8e8:	21 fd       	sbrc	r18, 1
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <fputc+0x16>
 8ec:	8f ef       	ldi	r24, 0xFF	; 255
 8ee:	9f ef       	ldi	r25, 0xFF	; 255
 8f0:	2c c0       	rjmp	.+88     	; 0x94a <fputc+0x6e>
 8f2:	22 ff       	sbrs	r18, 2
 8f4:	16 c0       	rjmp	.+44     	; 0x922 <fputc+0x46>
 8f6:	46 81       	ldd	r20, Z+6	; 0x06
 8f8:	57 81       	ldd	r21, Z+7	; 0x07
 8fa:	24 81       	ldd	r18, Z+4	; 0x04
 8fc:	35 81       	ldd	r19, Z+5	; 0x05
 8fe:	42 17       	cp	r20, r18
 900:	53 07       	cpc	r21, r19
 902:	44 f4       	brge	.+16     	; 0x914 <fputc+0x38>
 904:	a0 81       	ld	r26, Z
 906:	b1 81       	ldd	r27, Z+1	; 0x01
 908:	9d 01       	movw	r18, r26
 90a:	2f 5f       	subi	r18, 0xFF	; 255
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	20 83       	st	Z, r18
 910:	31 83       	std	Z+1, r19	; 0x01
 912:	8c 93       	st	X, r24
 914:	26 81       	ldd	r18, Z+6	; 0x06
 916:	37 81       	ldd	r19, Z+7	; 0x07
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	26 83       	std	Z+6, r18	; 0x06
 91e:	37 83       	std	Z+7, r19	; 0x07
 920:	14 c0       	rjmp	.+40     	; 0x94a <fputc+0x6e>
 922:	8b 01       	movw	r16, r22
 924:	ec 01       	movw	r28, r24
 926:	fb 01       	movw	r30, r22
 928:	00 84       	ldd	r0, Z+8	; 0x08
 92a:	f1 85       	ldd	r31, Z+9	; 0x09
 92c:	e0 2d       	mov	r30, r0
 92e:	09 95       	icall
 930:	89 2b       	or	r24, r25
 932:	e1 f6       	brne	.-72     	; 0x8ec <fputc+0x10>
 934:	d8 01       	movw	r26, r16
 936:	16 96       	adiw	r26, 0x06	; 6
 938:	8d 91       	ld	r24, X+
 93a:	9c 91       	ld	r25, X
 93c:	17 97       	sbiw	r26, 0x07	; 7
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	8d 93       	st	X+, r24
 944:	9c 93       	st	X, r25
 946:	17 97       	sbiw	r26, 0x07	; 7
 948:	ce 01       	movw	r24, r28
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	08 95       	ret

00000954 <__ultoa_invert>:
 954:	fa 01       	movw	r30, r20
 956:	aa 27       	eor	r26, r26
 958:	28 30       	cpi	r18, 0x08	; 8
 95a:	51 f1       	breq	.+84     	; 0x9b0 <__ultoa_invert+0x5c>
 95c:	20 31       	cpi	r18, 0x10	; 16
 95e:	81 f1       	breq	.+96     	; 0x9c0 <__ultoa_invert+0x6c>
 960:	e8 94       	clt
 962:	6f 93       	push	r22
 964:	6e 7f       	andi	r22, 0xFE	; 254
 966:	6e 5f       	subi	r22, 0xFE	; 254
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	af 4f       	sbci	r26, 0xFF	; 255
 970:	b1 e0       	ldi	r27, 0x01	; 1
 972:	3e d0       	rcall	.+124    	; 0x9f0 <__ultoa_invert+0x9c>
 974:	b4 e0       	ldi	r27, 0x04	; 4
 976:	3c d0       	rcall	.+120    	; 0x9f0 <__ultoa_invert+0x9c>
 978:	67 0f       	add	r22, r23
 97a:	78 1f       	adc	r23, r24
 97c:	89 1f       	adc	r24, r25
 97e:	9a 1f       	adc	r25, r26
 980:	a1 1d       	adc	r26, r1
 982:	68 0f       	add	r22, r24
 984:	79 1f       	adc	r23, r25
 986:	8a 1f       	adc	r24, r26
 988:	91 1d       	adc	r25, r1
 98a:	a1 1d       	adc	r26, r1
 98c:	6a 0f       	add	r22, r26
 98e:	71 1d       	adc	r23, r1
 990:	81 1d       	adc	r24, r1
 992:	91 1d       	adc	r25, r1
 994:	a1 1d       	adc	r26, r1
 996:	20 d0       	rcall	.+64     	; 0x9d8 <__ultoa_invert+0x84>
 998:	09 f4       	brne	.+2      	; 0x99c <__ultoa_invert+0x48>
 99a:	68 94       	set
 99c:	3f 91       	pop	r19
 99e:	2a e0       	ldi	r18, 0x0A	; 10
 9a0:	26 9f       	mul	r18, r22
 9a2:	11 24       	eor	r1, r1
 9a4:	30 19       	sub	r19, r0
 9a6:	30 5d       	subi	r19, 0xD0	; 208
 9a8:	31 93       	st	Z+, r19
 9aa:	de f6       	brtc	.-74     	; 0x962 <__ultoa_invert+0xe>
 9ac:	cf 01       	movw	r24, r30
 9ae:	08 95       	ret
 9b0:	46 2f       	mov	r20, r22
 9b2:	47 70       	andi	r20, 0x07	; 7
 9b4:	40 5d       	subi	r20, 0xD0	; 208
 9b6:	41 93       	st	Z+, r20
 9b8:	b3 e0       	ldi	r27, 0x03	; 3
 9ba:	0f d0       	rcall	.+30     	; 0x9da <__ultoa_invert+0x86>
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0x5c>
 9be:	f6 cf       	rjmp	.-20     	; 0x9ac <__ultoa_invert+0x58>
 9c0:	46 2f       	mov	r20, r22
 9c2:	4f 70       	andi	r20, 0x0F	; 15
 9c4:	40 5d       	subi	r20, 0xD0	; 208
 9c6:	4a 33       	cpi	r20, 0x3A	; 58
 9c8:	18 f0       	brcs	.+6      	; 0x9d0 <__ultoa_invert+0x7c>
 9ca:	49 5d       	subi	r20, 0xD9	; 217
 9cc:	31 fd       	sbrc	r19, 1
 9ce:	40 52       	subi	r20, 0x20	; 32
 9d0:	41 93       	st	Z+, r20
 9d2:	02 d0       	rcall	.+4      	; 0x9d8 <__ultoa_invert+0x84>
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__ultoa_invert+0x6c>
 9d6:	ea cf       	rjmp	.-44     	; 0x9ac <__ultoa_invert+0x58>
 9d8:	b4 e0       	ldi	r27, 0x04	; 4
 9da:	a6 95       	lsr	r26
 9dc:	97 95       	ror	r25
 9de:	87 95       	ror	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	ba 95       	dec	r27
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__ultoa_invert+0x86>
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	61 05       	cpc	r22, r1
 9ec:	71 05       	cpc	r23, r1
 9ee:	08 95       	ret
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	0a 2e       	mov	r0, r26
 9f6:	06 94       	lsr	r0
 9f8:	57 95       	ror	r21
 9fa:	47 95       	ror	r20
 9fc:	37 95       	ror	r19
 9fe:	27 95       	ror	r18
 a00:	ba 95       	dec	r27
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__ultoa_invert+0xa2>
 a04:	62 0f       	add	r22, r18
 a06:	73 1f       	adc	r23, r19
 a08:	84 1f       	adc	r24, r20
 a0a:	95 1f       	adc	r25, r21
 a0c:	a0 1d       	adc	r26, r0
 a0e:	08 95       	ret

00000a10 <__prologue_saves__>:
 a10:	2f 92       	push	r2
 a12:	3f 92       	push	r3
 a14:	4f 92       	push	r4
 a16:	5f 92       	push	r5
 a18:	6f 92       	push	r6
 a1a:	7f 92       	push	r7
 a1c:	8f 92       	push	r8
 a1e:	9f 92       	push	r9
 a20:	af 92       	push	r10
 a22:	bf 92       	push	r11
 a24:	cf 92       	push	r12
 a26:	df 92       	push	r13
 a28:	ef 92       	push	r14
 a2a:	ff 92       	push	r15
 a2c:	0f 93       	push	r16
 a2e:	1f 93       	push	r17
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	ca 1b       	sub	r28, r26
 a3a:	db 0b       	sbc	r29, r27
 a3c:	cd bf       	out	0x3d, r28	; 61
 a3e:	de bf       	out	0x3e, r29	; 62
 a40:	09 94       	ijmp

00000a42 <__epilogue_restores__>:
 a42:	2a 88       	ldd	r2, Y+18	; 0x12
 a44:	39 88       	ldd	r3, Y+17	; 0x11
 a46:	48 88       	ldd	r4, Y+16	; 0x10
 a48:	5f 84       	ldd	r5, Y+15	; 0x0f
 a4a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a4c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a4e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a50:	9b 84       	ldd	r9, Y+11	; 0x0b
 a52:	aa 84       	ldd	r10, Y+10	; 0x0a
 a54:	b9 84       	ldd	r11, Y+9	; 0x09
 a56:	c8 84       	ldd	r12, Y+8	; 0x08
 a58:	df 80       	ldd	r13, Y+7	; 0x07
 a5a:	ee 80       	ldd	r14, Y+6	; 0x06
 a5c:	fd 80       	ldd	r15, Y+5	; 0x05
 a5e:	0c 81       	ldd	r16, Y+4	; 0x04
 a60:	1b 81       	ldd	r17, Y+3	; 0x03
 a62:	aa 81       	ldd	r26, Y+2	; 0x02
 a64:	b9 81       	ldd	r27, Y+1	; 0x01
 a66:	ce 0f       	add	r28, r30
 a68:	d1 1d       	adc	r29, r1
 a6a:	cd bf       	out	0x3d, r28	; 61
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	ed 01       	movw	r28, r26
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
